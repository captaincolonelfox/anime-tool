#!/usr/bin/perl

use Data::Dumper;
use strict;
use Getopt::Long;
		  
my $mode = '';

my $moviepath = '.'; # By default its current folder
my $subspath;
my $audiopath;
my $needed_episode;
my $other_opts;


GetOptions(	'subs=s' => \$subspath,
			'audio=s' => \$audiopath,
			'episode=s' => \$needed_episode,
			'movie=s' => \$moviepath,
			'continue' => \my $continue,
			'next' => \my $next,
			'previous' => \my $previous,
			'debug' => \my $debug,
			'help' => sub {show_help()},
) or show_help();
	


if ($continue or $next or $previous) {

	# do loading stuff here
	
} else {
	if (defined $subspath) {
		if ($debug) { print "Using external subtitles\n" };
		$mode = $mode."subs";
	} 
	if (defined $audiopath) {
		if ($debug) { print "Using external audio file\n" };
		$mode = $mode."audio";
	}
};

# if nothing passed as argument and continue subroutine doesnt load anything
if (not defined $subspath and not defined $audiopath) {
	show_help()
}

# getting movie data
if ($debug) { print "Finding movies numbers:" };
my %hashed_movies = insaneFindFiles(sort(grep(/.+[.](mkv|avi)$/, getDirFiles($moviepath))));

# if episode is not passed then take first one in folder
if (not defined $needed_episode) {
	$needed_episode = get_episode_key(0,0,\%hashed_movies);
};

#print Dumper(%hashed_movies);
my $episodename = $hashed_movies{$needed_episode};
my $videopath = $moviepath . "/" . $episodename;
my $subsargs = "";
my $audioargs = "";

if ($mode =~ /.*subs.*/) {
	if ($debug) { print "Finding subs numbers:" };
	my %hashed_subs = insaneFindFiles(sort grep(/.+[.](ass|srt)$/, getDirFiles($subspath)));
	my $subsname = $hashed_subs{$needed_episode};
	$subsargs = "--sub-file '" . $subspath . "/" . $subsname . "'";
}
if ($mode =~ /.*audio.*/) {
	if ($debug) { print "Finding audio numbers:" };
	my %hashed_audio = insaneFindFiles(sort grep(/.+[.](mka|mp3|flac|ogg|wav|aif|ac3)$/, getDirFiles($audiopath)));
	my $audioname = $hashed_audio{$needed_episode};
	# well seems that if we specify no-sub and then --sub-file - subs gonna be working fine
	$audioargs = "--no-sub --audio-file '" . $audiopath . "/" . $audioname . "'";
}

my $mpvline = "mpv '$videopath' $audioargs $subsargs";
# yeah, we linked that shit
if ($debug) { print "Executing: $mpvline\n" };
system($mpvline);

sub getDirFiles {
	opendir my $dir, $_[0] or die "Cannot open directory: $!";
	my @files = readdir $dir;
	closedir $dir;
	return @files;
}

sub penetrateArray {
	# finding number position
	my $startposition = 0;
	my $endposition = 0;
	my $startedflag = -1;
	my $number = -1;

	my $direction = shift @_;
	my @filtered = @_;

	if ($direction) {
		@filtered = reverse @_;
		$number = 99999;
	}

	foreach my $filename (@filtered) {
		for my $i (0..length($filename)-1) {

			# skipping till current found number position
			if ($i<$startposition) {
				next;
			}
			#print "position: $i; $startedflag\n";

    		my $char = substr($filename, $i, 1);
    		if ($char =~ /[0-9]/) {
	    		#print "char: $char\n";
	    		# maybe number starts here
	    		if ($startedflag == -1) {
	    			$startposition = $i;
	    			$startedflag = 1;
	    			#print $startposition . "\n";
	    		} 
    		} else {
	    		# if receive character
	    		#print "c";
	    		if ($startedflag != -1) {
	    			# if still seeking for number
	    			$endposition = $i-1;
	    			$startedflag = -1;

	    			#print $endposition;
	    			# maybe we found number, maybe not. Now exiting, check if we are right next loop
	    			my $newnumber = substr($filename, $startposition, $endposition-$startposition +1);
	    			#print "\nnumber: $newnumber\n";
	    			if ($direction) {
		    			if ($number >= $newnumber+1) {
		    				# number incrementing, we may be correct
		    				$number = $newnumber;
		    				last;
		    			} else {

		    				#print "number is crap maybe nickname or other shit\n";
		    				$number = -1;

		    				# if we are at the end resetting all shit
		    				if ($i >= getLastNumberPosition($filename)) {
		    					#print "we reached end\n";
		    					$startposition = 0;
								$endposition = 0;
								$startedflag = -1;
								$number = 99999;
								last;
		    				}
		    			}
	    			} else {
		    			if ($number <= $newnumber-1) {
		    				# number incrementing, we may be correct
		    				$number = $newnumber;
		    				last;
		    			} else {

		    				#print "number is crap maybe nickname or other shit\n";
		    				$number = -1;

		    				# if we are at the end resetting all shit
		    				if ($i >= getLastNumberPosition($filename)) {
		    					$startposition = 0;
								$endposition = 0;
								$startedflag = -1;
								$number = -1;
								last;
		    				}
		    			}	
	    			}	
	    		}
    		}
    	}
	}

#print "$startposition,$endposition,$number\n";
# validating
my $extracted = -1;
foreach my $filename (@filtered)
{

	if ($extracted == substr($filename, $startposition, $endposition-$startposition+1)) {
		if (!($direction)) {
			return penetrateArray(1,@filtered);
		} else {
	
		if ($debug) { print "$extracted,$startposition,$endposition,$number\n" };
			die "Cannot get fucking numbers! Seems like a bug or unpredictable input";
		}
	} else {
		$extracted = substr($filename, $startposition, $endposition-$startposition+1);
	}

}
#print "$extracted,$startposition,$endposition,$number\n";

return ($startposition,$endposition,$number);}

sub getLastNumberPosition {
	my $string = shift @_;
	my $pos = 0;

	for my $i (0..length($string)-1) {
		my $char = substr($string, $i, 1);
    	if ($char =~ /[0-9]/) {
    		$pos = $i;
    	}
	}

	return $pos;
}




sub filterOnlyEpidodes {
	my $direction = shift @_;

	my @dirtymix = @_;

	if ($debug) { print "\n" };

	# masking array
	my @array_mask = create_mask_array(\@dirtymix, $direction);

	#print Dumper(@array_mask);
	
	# generating character weights
	my @weights = ();
	for my $i (0..length($array_mask[0])-1){
		push @weights, 0;
	}

	#print Dumper(@array_mask);
	my @previousmasks = ($array_mask[0]);
	#print Dumper(@previousmasks);
	my $counter = 0;
	foreach my $filename (@array_mask) {
		#print Dumper(@previousmasks);
		#print "$previousmask : $filename \n";
		my $scope = length($filename)-1;
		foreach my $mask (@previousmasks) {
			my $current_scope = 0;
			for my $i (0..length($filename)-1) {
				if (substr($filename, $i, 1) eq substr($mask, $i, 1)) {
					$current_scope++;
				} else {
					if ($current_scope < $scope) {
						$scope = $current_scope;
					}
					last;
				}
			}
		}

		#print "$scope\n";
		if ($scope < length($filename)-1) {
			$weights[$scope]++;
		}

		#$previousmask = @array_mask[$counter++];
		push @previousmasks, $array_mask[$counter++];
	}
	#print Dumper(@weights);

	my $heaviest_scope = 0;
	my $maxweight = 0;
	
	foreach my $i (0..scalar(@weights)-1) {
		if ($weights[$i] > 0) {
			if ($debug) { print "Scope length: $i Weight: $weights[$i]\n" };
			if ($maxweight < $weights[$i]) {
				$maxweight = $weights[$i];
				$heaviest_scope = $i;
			}
		}
	}

	if ($debug) { print "Heaviest scope: $heaviest_scope\n" };

	# after that crazy shit taking scope with biggest weight and dropping other crap
	# seems that we need to iterate over all masks again

	# cutting masks to scope lengths
	my @cutted_masks = ();
	foreach my $i (0..scalar(@array_mask)-1) {
		$cutted_masks[$i] = substr($array_mask[$i], 0, $heaviest_scope);
	}

	#print Dumper(@cutted_masks);

	my @reference_weights = ();
	foreach my $i (0..scalar(@array_mask)-1) {
		push @reference_weights, 0;
	}

	# comparing with each other to calculate weights again to find reference mask
	my $counter = 0;
	foreach my $i (0..scalar(@cutted_masks)-1) {
		foreach my $curmask (@cutted_masks) {
			if ($curmask eq $cutted_masks[$i]) {
				$reference_weights[$i]++;
			}
		}
	}

	# finding reference mask
	my $max_mask_weight = 0;
	my $reference_mask = "";

	#print Dumper(@reference_weights);
	foreach my $i (0..scalar(@cutted_masks)-1) {
		if ($reference_weights[$i] > $max_mask_weight) {
			$max_mask_weight = $reference_weights[$i];
			$reference_mask = $cutted_masks[$i];
		}
	}
	if ($debug) { print "Reference mask: $reference_mask\n" };

	#print Dumper($max_mask_weight);
	#print "\n";

	#print Dumper(@cutted_masks);
	#print Dumper($reference_mask);

	# finding keys for dropping crap
	my @keys_to_drop = ();
	foreach my $i (0..scalar(@cutted_masks)-1) {
		if ($cutted_masks[$i] ne $reference_mask) {
			push @keys_to_drop, $i;
		}
	}

	#print Dumper(@keys_to_drop);

	# finally dropping keys
	my @clean_result = ();
	OUTER: foreach my $i (0..scalar(@dirtymix)-1) {
		# not adding blacklisted keys
		foreach my $key (@keys_to_drop) {
			if ($i == $key) {
				print "Dropping: " . $dirtymix[$i] . "\n";
				next OUTER;
			}
		}
		push @clean_result, $dirtymix[$i];
	}

	#print Dumper(@clean_result);
	#exit;

	return sort @clean_result;
}

sub create_mask_array {
	my @dirtymix = @{$_[0]};
	my $direction = $_[1];
	my @array_mask = ();
	my $counter = 0;

	foreach my $filename (@dirtymix) {
		my $current_mask = "";

		for my $i (0..length($filename)-1) {
			my $char = substr($filename, $i, 1);
		
			if ($char =~ /[0-9]/) {
				$current_mask .= '/';
				next;
			}			
			# else
			$current_mask .= $char;
			next;	
		}

		$array_mask[$counter++] = $current_mask;	
	}

	if ($direction == 1) {
		return mirror_array_mask(\@array_mask);
	}
	else {
		return @array_mask;
	}
}

sub mirror_array_mask {
	if ($debug) { print "Testing mirrored mode (going backwards)\n" };

	my @mirrored_mask = @{$_[0]};

	for my $i (0..scalar(@mirrored_mask)-1) {
		$mirrored_mask[$i] = join '', map substr($mirrored_mask[$i], -$_, 1), 1..length($mirrored_mask[$i]);
	}

	return @mirrored_mask;
}


sub insaneFindFiles {
	my @args = @_;

	my @filtered = filterOnlyEpidodes(0,@args);
	my @backward = filterOnlyEpidodes(1,@args);
	
	#print Dumper(@filtered);
	if ($debug) { 
		if (scalar(@backward) < scalar(@filtered)) {
			print "Using backwards result\n";
		} else {
			print "Using forward result\n";
		}
	};

	my $dropped_count = scalar(@args)-scalar(@filtered);
	if ($dropped_count > 0) {
		print "Dropped " . ($dropped_count) . " files\n";
	};

	my @result = penetrateArray(0,@filtered);

	my $startposition = shift @result;
	my $endposition = shift @result;
	my $number = shift @result;
	#print "TEST: L$startposition L$endposition L$number\n\n\n";

	if ($debug) { 
		print "Found series numbers: ";
		foreach my $filename (@filtered)
		{
			print substr($filename, $startposition, $endposition-$startposition + 1) . ",";
		}
		print "\n";
	};

	# generating hash
	return generate_hashed_episodes_from(\@filtered, $startposition, $endposition);
}

sub generate_hashed_episodes_from {
	# get arguments
	my($filtered, $startposition, $endposition ) = @_;

	# create empty hash
	my %hashed_episodes = ();

	# fill hash with episode:name
	foreach my $filename (@$filtered) {
		my $episode_number = substr($filename, $startposition, $endposition-$startposition + 1);
		if ($episode_number =~ /^[0-9]+$/) {
			$hashed_episodes{$episode_number} = escape_crap($filename);
		}
	}

	return %hashed_episodes;
}

sub get_episode_key {
    my $base_ep = shift;
    my $step = shift;
    my %hash = %{$_[0]};
    
    # get index of of base episode
    my @sorted_episodes = sort keys %hash;
    my ($index) = grep { $sorted_episodes[$_] eq $base_ep } 0 .. $#sorted_episodes;
    $index = 0 if not defined $index;
    
    # return undef if number out of range
    if ($index + $step < 0 or
        $index + $step > $#sorted_episodes) {
        return undef
    }

    # return episode + (-) step
    return $sorted_episodes[$index + $step]
}

sub escape_crap {
	# that's real crap, not a fix
	$_[0] =~ s/[']/'"'"'/g;
	return $_[0];
}

sub show_help {
	print "\nThis tool searches for randomly named external files and starts mpv player\n\n";
	print "For external audio:\n\$ anime-tool -audio='/path/to/audio/folder' '/path/to/video/folder' EPISODE_NUMBER\n\n";
	print "For external subs:\n\$ anime-tool -subs='/path/to/subs/folder' '/path/to/video/folder' EPISODE_NUMBER\n\n";
	print "For both:\n\$ anime-tool -audio='/path/to/audio/folder' -subs='/path/to/subs/folder' '/path/to/video/folder' EPISODE_NUMBER\n\n";
	print "Example:\n\$ anime-tool -subs='~/Downloads/yoi-collection/subs-rus' '~/Downloads/yoi-collection' 69\n\n";
	print "You need to specify episode number with leading zeroes like in original files!!!\n";
	print "Notice: '--' and '-' both fine: '--audio=' or '-audio=' and also shorthand: -s and -a\n\n";
	exit;
}
